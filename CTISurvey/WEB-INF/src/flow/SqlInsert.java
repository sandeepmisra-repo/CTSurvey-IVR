package flow;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;

import CrsCde.CODE.MSSQL.DB.MsSQLDBManager;
import CrsCde.CODE.MSSQL.DB.MsSQLResultSet;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2019-AUG-08  11:58:18 AM
 */
public class SqlInsert extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2019-AUG-08  11:58:18 AM
	 */
	public SqlInsert() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2019-AUG-08  11:58:18 AM
	 */
	public String MobileNumber =""; 
	public String Ucid ="";
	public String DTMF ="";
	public String Check ="";
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {
		Date date = new Date();//yyddMMhhmmss
		SimpleDateFormat sdate = new SimpleDateFormat("dd-MM-yy");
		SimpleDateFormat stime = new SimpleDateFormat("HH:mm:ss");
		String formattedDate = sdate.format(date);
		String formattedTime = stime.format(date);
		String TimeStamp=formattedDate + "\t"+ formattedTime;
		// TODO: Add your code here!
		 MobileNumber =  mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).getStringValue();
		 Ucid =  mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_UCID).getStringValue();
		 DTMF = mySession.getVariableField(IProjectVariables.SURVEY_DTMFDATA).toString();
		 Check = mySession.getVariableField(IProjectVariables.GET_INPUT).toString();
		 LogFileIn.stringLogBuilder.append("\r\n"+TimeStamp+"\t"+ "[MOBILE NUMBER , UCID ,  SURVEY SCORE ]     -->");
	     LogFileIn.stringLogBuilder.append(MobileNumber+","+Ucid+","+DTMF);
	     
//	     LogFileIn.stringLogBuilder.append("\r\n"+TimeStamp+"\t"+ "[ Check ]     -->");
//	     LogFileIn.stringLogBuilder.append(Check);
		 String response = SqlInsertData(Ucid,MobileNumber,DTMF);
		 if(response != "")
		 {
			 LogFileIn.stringLogBuilder.append("\r\n"+TimeStamp+"\t"+ "[Response From Database]     -->");
		     LogFileIn.stringLogBuilder.append(response);
		 }
		

	}
	public String SqlInsertData(String ucid,String ani,String DTMF)
	{
		String Data ="";
		try { 
			
			MsSQLDBManager _dbMgr=new MsSQLDBManager("10.147.48.37", null,1433,"CTIData", "sa", "P@ssw0rdfc01",4,4);
//			MsSQLDBManager _dbMgr=new MsSQLDBManager("192.168.64.128", null,1433,"RoughData", "sa", "p@ssw0rd",4,4);
			String qry="INSERT INTO ctsurveydtmf(UCID,Mobile,DTMF) VALUES ('"+ucid+"','"+ani+"','"+DTMF+"')";
			_dbMgr.Execute(qry); 
			
        } catch (Exception e) { 
//            System.err.println("Got an exception! "); 
//            System.err.println(e.getMessage());
        	Data= e.toString();
        	
        } 
		return Data;
		
	}
	
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2019-AUG-28  11:18:59 AM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("LogFileOut", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
